{
    "name": "Audit-RoleAssignmentType-User",
    "type": "Microsoft.Authorization/policyDefinitions",
    "properties": {
        "policyType": "Custom",
        "displayName": "Audit user role assignments",
        "mode": "All",
        "description": "This policy checks for any Role Assignments of Type [User] - useful to catch individual IAM assignments to resources/RGs which are out of compliance with the RBAC standards e.g. using Groups for RBAC.",
        "metadata": {
            "version": "1.0.0",
            "category": "Azure Active Directory",
            "source": "https://github.com/azurenoops/",
            "anoaCloudEnvironments": [
                "AzureCloud",
                "AzureUSGovernment"
            ]
        },
        "parameters": {
            "effect": {
                "type": "String",
                "metadata": {
                    "displayName": "Effect",
                    "description": "Enable or disable the execution of the policy"
                },
                "allowedValues": [
                    "Audit",
                    "Disabled"
                ],
                "defaultValue": "Audit"
            },
            "principalType": {
                "type": "String",
                "metadata": {
                    "displayName": "principalType",
                    "description": "Which principalType to audit against e.g. 'User'"
                },
                "allowedValues": [
                    "User",
                    "Group",
                    "ServicePrincipal"
                ],
                "defaultValue": "User"
            }
        },
        "policyRule": {
            "if": {
                "allOf": [
                    {
                        "field": "type",
                        "equals": "Microsoft.Authorization/roleAssignments"
                    },
                    {
                        "field": "Microsoft.Authorization/roleAssignments/principalType",
                        "equals": "[parameters('principalType')]"
                    }
                ]
            },
            "then": {
                "effect": "[parameters('effect')]"
            }
        }
    }
}